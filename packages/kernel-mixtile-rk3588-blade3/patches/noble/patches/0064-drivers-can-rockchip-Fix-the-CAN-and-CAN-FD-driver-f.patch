From acf81a30451ddf8df672da41d60ed5917d98a0c8 Mon Sep 17 00:00:00 2001
From: Joshua Riek <jjriek@verizon.net>
Date: Sun, 25 Aug 2024 03:41:18 -0400
Subject: [PATCH 343/364] drivers: can: rockchip: Fix the CAN and CAN-FD driver
 for use in kernel 6.1

Existing CAN driver code was not ported to kernel 6.1 from kernel 5.10.
---
 drivers/net/can/rockchip/rockchip_can.c   |  7 +++++--
 drivers/net/can/rockchip/rockchip_canfd.c | 14 ++++++++++----
 2 files changed, 15 insertions(+), 6 deletions(-)

diff --git a/drivers/net/can/rockchip/rockchip_can.c b/drivers/net/can/rockchip/rockchip_can.c
index f756fdfc39b8..1327a66e77b5 100644
--- a/drivers/net/can/rockchip/rockchip_can.c
+++ b/drivers/net/can/rockchip/rockchip_can.c
@@ -499,6 +499,7 @@ static irqreturn_t rockchip_can_interrupt(int irq, void *dev_id)
 	struct net_device *ndev = (struct net_device *)dev_id;
 	struct rockchip_can *rcan = netdev_priv(ndev);
 	struct net_device_stats *stats = &ndev->stats;
+	unsigned int dumy;
 	u8 err_int = ERR_WARN_INT | RX_BUF_OV | PASSIVE_ERR |
 		     TX_LOSTARB | BUS_ERR_INT;
 	u8 isr;
@@ -506,9 +507,11 @@ static irqreturn_t rockchip_can_interrupt(int irq, void *dev_id)
 	isr = readl(rcan->base + CAN_INT);
 	if (isr & TX_FINISH) {
 		/* transmission complete interrupt */
-		rockchip_can_write_cmdreg(rcan, 0);
-		stats->tx_bytes += can_get_echo_skb(ndev, 0, NULL);
+		stats->tx_bytes += readl(rcan->base + CAN_TX_FRM_INFO) &
+				   CAN_DLC_MASK;
 		stats->tx_packets++;
+		rockchip_can_write_cmdreg(rcan, 0);
+		dumy = can_get_echo_skb(ndev, 0, NULL);
 		netif_wake_queue(ndev);
 	}
 
diff --git a/drivers/net/can/rockchip/rockchip_canfd.c b/drivers/net/can/rockchip/rockchip_canfd.c
index b50ab3338e5b..269cb2347c96 100644
--- a/drivers/net/can/rockchip/rockchip_canfd.c
+++ b/drivers/net/can/rockchip/rockchip_canfd.c
@@ -549,7 +549,7 @@ static netdev_tx_t rockchip_canfd_start_xmit(struct sk_buff *skb,
 	if (cf->can_id & CAN_EFF_FLAG) {
 		/* Extended CAN ID format */
 		id = cf->can_id & CAN_EFF_MASK;
-		dlc = can_fd_len2dlc(cf->len) & DLC_MASK;
+		dlc = can_fd_dlc2len(cf->len) & DLC_MASK;
 		dlc |= FORMAT_MASK;
 
 		/* Extended frames remote TX request */
@@ -558,7 +558,7 @@ static netdev_tx_t rockchip_canfd_start_xmit(struct sk_buff *skb,
 	} else {
 		/* Standard CAN ID format */
 		id = cf->can_id & CAN_SFF_MASK;
-		dlc = can_fd_len2dlc(cf->len) & DLC_MASK;
+		dlc = can_fd_dlc2len(cf->len) & DLC_MASK;
 
 		/* Standard frames remote TX request */
 		if (cf->can_id & CAN_RTR_FLAG)
@@ -811,6 +811,7 @@ static irqreturn_t rockchip_canfd_interrupt(int irq, void *dev_id)
 	struct net_device *ndev = (struct net_device *)dev_id;
 	struct rockchip_canfd *rcan = netdev_priv(ndev);
 	struct net_device_stats *stats = &ndev->stats;
+	unsigned int dumy;
 	u32 err_int = ERR_WARN_INT | RX_BUF_OV_INT | PASSIVE_ERR_INT |
 		      BUS_ERR_INT | BUS_OFF_INT;
 	u32 isr;
@@ -821,6 +822,12 @@ static irqreturn_t rockchip_canfd_interrupt(int irq, void *dev_id)
 	if (isr & TX_FINISH_INT) {
 		cancel_delayed_work(&rcan->tx_err_work);
 		dlc = rockchip_canfd_read(rcan, CAN_TXFIC);
+		/* transmission complete interrupt */
+		if (dlc & FDF_MASK)
+			stats->tx_bytes += can_fd_dlc2len(dlc & DLC_MASK);
+		else
+			stats->tx_bytes += (dlc & DLC_MASK);
+		stats->tx_packets++;
 		if (rcan->txtorx && rcan->mode <= ROCKCHIP_RK3568_CAN_MODE && dlc & FORMAT_MASK) {
 			rockchip_canfd_write(rcan, CAN_TX_CHECK_FIC, FORMAT_MASK);
 			quota = rockchip_canfd_get_rx_fifo_cnt(ndev);
@@ -837,8 +844,7 @@ static irqreturn_t rockchip_canfd_interrupt(int irq, void *dev_id)
 					     0, 5000000, false, rcan, CAN_CMD))
 			netdev_err(ndev, "Warning: wait tx req timeout!\n");
 		rockchip_canfd_write(rcan, CAN_CMD, 0);
-		stats->tx_bytes += can_get_echo_skb(ndev, 0, NULL);
-		stats->tx_packets++;
+		dumy = can_get_echo_skb(ndev, 0, NULL);
 		netif_wake_queue(ndev);
 	}
 
-- 
2.43.0

